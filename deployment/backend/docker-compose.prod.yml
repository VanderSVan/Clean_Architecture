version: '3.9'

services:
  backend:
    container_name: "backend"
    restart: unless-stopped
    build:
      context: ../..
      dockerfile: deployment/backend/Dockerfile
      target: production
    depends_on:
      db:
        condition: service_healthy
      backend_for_tests:
        condition: service_completed_successfully
    environment:
      DATABASE_HOST: "db"
      DATABASE_PORT: ${DATABASE_PORT}
      RABBITMQ_HOST: "rabbitmq"
    entrypoint: ["entrypoint_api.sh"]
    networks:
      - backend_network
    env_file:
      - ../../components/backend/.env

  notification_worker:
    restart: unless-stopped
    build:
      context: ../..
      dockerfile: deployment/backend/Dockerfile
      target: development
    depends_on:
      - backend
      - rabbitmq
    environment:
      DATABASE_HOST: "db"
      DATABASE_PORT: ${DATABASE_PORT}
      RABBITMQ_HOST: "rabbitmq"
    entrypoint: [ "entrypoint_notification_worker.sh" ]
    networks:
      - backend_network
    env_file:
      - ../../components/backend/.env

  match_worker:
    restart: unless-stopped
    build:
      context: ../..
      dockerfile: deployment/backend/Dockerfile
      target: development
    depends_on:
      - backend
      - rabbitmq
    environment:
      DATABASE_HOST: "db"
      DATABASE_PORT: ${DATABASE_PORT}
      RABBITMQ_HOST: "rabbitmq"
    entrypoint: [ "entrypoint_match_worker.sh" ]
    networks:
      - backend_network
    env_file:
      - ../../components/backend/.env

  delivery_consumer:
    restart: unless-stopped
    build:
      context: ../..
      dockerfile: deployment/backend/Dockerfile
      target: development
    depends_on:
      - backend
      - rabbitmq
    environment:
      DATABASE_HOST: "db"
      DATABASE_PORT: ${DATABASE_PORT}
      RABBITMQ_HOST: "rabbitmq"
    entrypoint: [ "entrypoint_delivery_consumer.sh" ]
    networks:
      - backend_network
    env_file:
      - ../../components/backend/.env

  db:
    container_name: "db"
    restart: unless-stopped
    image: postgres:15
    depends_on:
      db_for_tests:
        condition: service_healthy
      backend_for_tests:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db:/var/lib/postgresql/data
    expose:
      - ${DATABASE_PORT}
    networks:
      - backend_network
    env_file:
      - ../../components/backend/.env

  backend_for_tests:
    container_name: "backend-tests"
    build:
      context: ../..
      dockerfile: deployment/backend/Dockerfile
      target: tests
    depends_on:
      db_for_tests:
        condition: service_healthy
    environment:
      TEST_DATABASE_HOST: "db_for_tests"
      TEST_DATABASE_PORT: ${DATABASE_PORT}
      API_ENV: production
    entrypoint: ["entrypoint_tests.sh"]
    networks:
      - backend_network
    env_file:
      - ../../components/backend/.env

  db_for_tests:
    container_name: "test_db"
    restart: unless-stopped
    image: postgres:15
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 5
    environment:
      POSTGRES_USER: ${TEST_DATABASE_USER}
      POSTGRES_PASSWORD: ${TEST_DATABASE_PASSWORD}
      POSTGRES_DB: ${TEST_DATABASE_NAME}
    expose:
      - ${DATABASE_PORT}
    networks:
      - backend_network
    env_file:
      - ../../components/backend/.env

  rabbitmq:
    container_name: "rabbitmq"
    image: rabbitmq:management
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,info},{default,error}] disk_free_limit 2147483648 # Ограничение свободного места на диске до 2 гигабит
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - backend_network

  pgadmin:
    container_name: "pgadmin4"
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - backend_network
    depends_on:
      db:
        condition: service_healthy
      db_for_tests:
        condition: service_healthy

  nginx:
    container_name: "nginx"
    restart: always
    image: nginx:1.26-alpine
    depends_on:
      - db
      - backend
      - notification_worker
      - match_worker
      - delivery_consumer
      - pgadmin
    volumes:
      - ./nginx_config/default.prod.conf:/etc/nginx/conf.d/default.conf
    ports:
      - ${NGINX_EXTERNAL_PORT}:${NGINX_INTERNAL_PORT}
    networks:
      - backend_network

volumes:
  db:
  pgadmin-data:
  rabbitmq-data:

networks:
  backend_network:
    driver: bridge
