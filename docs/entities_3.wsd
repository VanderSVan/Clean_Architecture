@startuml

title: Упрощенная схема приложения
hide circle
skinparam linetype ortho

class User {
  +id: int
  ..
  +role: str
}

class AuthorizedUser {
  +email: str
  ..
  +password: str
  ..
  +full_name: str | None
  ..
  +nickname: str
}

class Patient {
  +gender: str
  ..
  +age: int
  ..
  +skin_type: str
  ..
  +about: str | None
  ..
  +phone: int | None
  ..
  +profile_photo_path: str | None
}

class Symptom {
  +id: int
  ..
  +name: str
}

class Diagnosis {
  +id: int
  ..
  +name: str
}

class PatientMedicalHistory {
  +id: int
  ..
  +title: str
  ..
  +history: str | None
  ..
  +patient: Patient
  ..
  +diagnosis: Diagnosis
  ..
  +symptoms: list[Symptom]
  --
  {method} +add_symptoms(symptoms: Iterable[Symptom]): void
  ..
  {method} +remove_symptoms(symptoms: Iterable[Symptom]): void
}

class ItemCategory {
  +id: int
  ..
  +name: str
}

class ItemType {
  +id: int
  ..
  +name: str
}

class TreatmentItem {
  +id: int
  ..
  +sku: str
  ..
  +title: str
  ..
  +description: str | None
  ..
  +price: float
  ..
  +category: ItemCategory
  ..
  +type: ItemType
}

class TreatmentItemFeedback {
  +id: int
  ..
  +item: TreatmentItem
  ..
  +is_helped: bool
  ..
  +item_rating: float
  ..
  +item_count: int
  ..
  +usage_period: int | None
}

class CompletedTreatmentProtocol {
  +id: int
  ..
  +patient_medical_history: PatientMedicalHistory
  ..
  +item_feedbacks: list[TreatmentItemFeedback]
  ..
  +is_treatment_help: bool
  ..
  +treatment_cost: float
  --
  {method} +sort_items_by_rating(order: Literal['asc', 'desc'] = 'desc'): void
}

User --|> AuthorizedUser

AuthorizedUser --|> Patient


PatientMedicalHistory --* Symptom
PatientMedicalHistory --* Diagnosis
PatientMedicalHistory --* Patient

TreatmentItem --* ItemCategory
TreatmentItem --* ItemType

TreatmentItemFeedback --* TreatmentItem

CompletedTreatmentProtocol --* PatientMedicalHistory
CompletedTreatmentProtocol --* TreatmentItemFeedback

@enduml